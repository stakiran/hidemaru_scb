// 動作
// - 1: scbファイル以外は操作しない、そのままおわり
// - 2: 選択状態だった場合はブラケティングしておわり
// - 3: openbyshell で開ける場合は開いておわり
// - 4: ブラケットを解釈して new or open

if(filetype != ".scb"){
	endmacro;
}

選択状態だったら選択位置をブラケティングして終わり:
// 選択状態でも openbyshell が発動するのでこっちを先に判定する.
if(selecting == 1){
	if(seltoplineno != selendlineno){
		endmacro;
	}
	#topx = seltopcolumn;
	#endx = selendcolumn;
	#originalx = column;
	#cury = seltoplineno;
	// 範囲選択中で insert すると上書きされるので, 範囲選択は解除する
	escape;
	moveto2 #topx, #cury;
	insert "[";
	moveto2 #endx + 1, #cury;
	insert "]";
	// ブラケティング後に続きを書く事が多いので, 常に右端に移動しちゃって良い.
	// 囲み文字分(+2)を超えないと右端にいけないので +2 する
	//moveto2 #originalx, #cury;
	moveto2 #endx+2, #cury;
	endmacro;
}

URLやファイルパスの場合はとりあえず開いてみる:
openbyshell;
if(result == true){
	endmacro;
}

現在行取得:

// x,y など座標だと折り返しに対応できないので、column,lineno のエディタ的位置を使う
$curline = gettext2(0, lineno, linelen2, lineno, 0);
#wcslinelen = wcslen($curline);
if(#wcslinelen == 0){
	endmacro;
}
#lineendpos = #wcslinelen;

現在X位置取得:

call get_curx;
#curx = ##return;

スマートリンク:

// リンクしか書いてない行の場合、内部にいなくても開きたい。
// 判定して、いけそうなら内部にいたことにしてしまう。
//
// 判定とは
//   case1: 行頭にいる
//        I   [xxxx]
//   case2: 行末にいる
//            [xxxx]I
//
// 内部にいたことにする、とは
//   カーソルをブラケットの内部にまで移動させてしまう
//
// 行頭や行末ではなく「間が空白だけなら問題ない」とはしてしまわないのか？
//   しない
//   理由は、判定処理が難しくなるから
//   たとえば以下のケースを判定するのは難しい
//        I   [xxxx]          これは移動したい
//         [xxx] I  [xxxx]    これは移動したくない
//   後者を判定するためには前後を調べないといけない……など処理が煩雑になる

if(#curx == 0){
	// case1

	#movecount = -1;
	#searchpos = #curx;
	while(#searchpos < #lineendpos){
		$c = wcsmidstr($curline, #searchpos, 1);
		#searchpos = #searchpos + 1;
		if($c == " "){
			continue;
		}
		if($c == "["){
			#movecount = #searchpos;
			break;
		}
		break;
	}
	if(#movecount != -1){
		right #movecount;
		call get_curx;
		#curx = ##return;
	}

}else if(#curx == #lineendpos){
	// case2

	#movecount = 0;
	#searchpos = #curx;
	// リンクは [x] で最低3文字なので3文字目まで調べれば十分
	while(#searchpos > 2){
		#searchpos = #searchpos - 1;
		$c = wcsmidstr($curline, #searchpos, 1);
		if($c == " "){
			#movecount = #movecount + 1;
			continue
		}
		if($c == "]"){
			#movecount = #movecount + 1;
			break;
		}
		break;
	}
	if(#movecount > 0){
		left #movecount;
		call get_curx;
		#curx = ##return;
	}
}


ブラケット位置の取得_←方向:

#startpos = -1;
#searchpos = #curx;
while(#searchpos > 0){
	#searchpos = #searchpos - 1;
	$c = wcsmidstr($curline, #searchpos, 1);
	if($c == "]"){
		// [xxxx]   I    [xxxx]
		// このようなケースが考えられるが、無効にする
		// これ無効にしないと "xxxx]   I    [xxxx" これが検出されてしまう
		break;
	}
	if($c == "["){
		#startpos = #searchpos + 1;
		break;
	}
}
if(#startpos == -1){
	endmacro;
}

ブラケット位置の取得_→方向:

#endpos = -1;
// ...xxx]
//      ^
//     ここの時に動かないのでずらす
//#searchpos = #curx;
#searchpos = #curx - 1;
while(#searchpos < #lineendpos){
	#searchpos = #searchpos + 1;
	$c = wcsmidstr($curline, #searchpos, 1);
	if($c == "]"){
		#endpos = #searchpos;
		break;
	}
}
if(#endpos == -1){
	endmacro;
}

ブラケット内の文字列を取得:

#pickup_length = #endpos - #startpos;
$pickuped_word = wcsmidstr($curline, #startpos, #pickup_length);

新規orオープンするフルパスをつくる前のファイル名加工:

$title = $pickuped_word;
call is_not_page_link $title;
if(##return){
	endmacro;
}

$afterchar = "_";
call replace_invalid_char_as_filename $title, $afterchar;
$target_basename = $$return;

新規orオープンするフルパスをつくる:

$curdir = directory;
$target_ext = ".scb";
$target_filename = $target_basename + $target_ext;
$target_fullpath = $curdir + "\\" + $target_filename;

開く:

$target_fullpath_quoted = "\"" + $target_fullpath + "\"";
openfile $target_fullpath;
endmacro;

// ----------------------------
// sub-routines
// ----------------------------


get_curx:
// Unicode文字列換算で現在X位置取得する。
//##curx = x; //これだとUnicode文字列のカウントにならないので位置計算が軒並み狂う。
$$string_between_x0_and_current = gettext2(0, lineno, column, lineno, 0);
##curx = wcslen($$string_between_x0_and_current);
return ##curx;

// リンク記法でないものを弾く
// - [- 打ち消し線]
// - [* 太字]
// - [https://…… title]
// - [title https://……]
is_not_page_link:
$$title = $$1;
$$head = wcsmidstr($$title, 0, 1);
if($$head == "-"){
	return true;
}
if($$head == "*"){
	return true;
}
##idx = wcsstrstr($$title, "http://");
if(##idx != -1){
	return true;
}
##idx = wcsstrstr($$title, "https://");
if(##idx != -1){
	return true;
}
return false;

// [実装アイデア]
// - 秀丸エディタには replace 関数がない
// - 今開いているウィンドウに対してなら replace できる
// - 見えないウィンドウを出すこともできる
// (1) というわけで「見えないウィンドウに文字列貼り付けてreplaceする」で実現する.
//
// (2) 性能のため、replace したいパターン n 個はすべてステルスファイル内で行う.
// 参考: http://officetanaka.net/other/hidemaru/10.htm
replace_invalid_char_as_filename:
$$target = $$1;
$$after = $$2;
##caller_hwnd = hidemaruhandle(0);
openfile "/h";
##stealth_window_hwnd = hidemaruhandle(0);
insert $$target;
call save_searchsettings;
replaceallfast "\\", $$after;
replaceallfast "/", $$after;
replaceallfast ":", $$after;
replaceallfast "*", $$after;
replaceallfast "?", $$after;
replaceallfast "\"", $$after;
replaceallfast ">", $$after;
replaceallfast "<", $$after;
replaceallfast "|", $$after;
// スペースはファイル名として無効な文字ではないが
// ファイル名に含まれると鬱陶しいので殺す
replaceallfast " ", $$after;
call restore_searchsettings;
selectall;
$$replaced_string = gettext2(seltopcolumn, seltoplineno, selendcolumn, selendlineno);
setactivehidemaru ##caller_hwnd;
closehidemaruforced ##stealth_window_hwnd;
return $$replaced_string;

// 検索設定が上書きされるのを防ぐため, 
// 現在の設定を保持してから検索を行い, 終わった後で復旧するようにする.
//
// [使い方]
// save → 検索設定上書きされる系操作一通り → restore
save_searchsettings:
#oldsettings = searchoption;
$oldgrepee   = grepfilebuffer;
$oldquery = ""; // 元々検索語は保持されてないのでテキトーに空文字で.
return;

restore_searchsettings:
setsearch $oldquery, #oldsettings;
setgrepfile $oldgrepee;
return;
